Exam 2 Multiple Choice Questions

- These questions may not be in the same order as what you saw on the exam.
- Your answer is indicated by a '->'

~~~~~~~~~~~~~~~~~~~~~~~~

Consider the following class definitions:

    class Restaurant{
    public:
        int rate() const;
    private:
        double rating;
    };

    class Chipotle: public Restaurant {
    public:
        int rateBad();
    };

Where could the assignment `rating = 3.0;` appear for the private
variable `rating`?

Choices:
   a. `rate()` can make the assignment, but `rateBad()` cannot.
   b. The answer to this question cannot be determined from the given code.
   c. Both `rate()` and `rateBad()` can make the assignment.
   d. `rateBad()` can make the assignment, but `rate()` cannot.
-> e. Neither `rate()` nor `rateBad()` can make the assignment.
Your answer was correct.

~~~~~~~~~~~~~~~~~~~~~~~~

Suppose `class pictureRep` contains exactly one pure virtual function:
the overloaded parentheses operator, `int operator()(int i, int j)`.
Also suppose that `class hardPNG` is a `public pictureRep` that
implements `operator()`. Which of the following C++ statements will
certainly result in a compiler error?

Choices:
   a. None of the code options will result in a compiler error.
-> b. ```
      hardPNG * a = new pictureRep;
      ```
   c. Exactly two of the code options will result in a compiler error.
   d. ```
      hardPNG * a = new hardPNG;
      ```
   e. ```
      pictureRep * a = new hardPNG;
      hardPNG * b;
      a = b;
      ```
Your answer was correct.

~~~~~~~~~~~~~~~~~~~~~~~~

Using the templatized `MyPair` class defined in lecture, and the
standard `string` class, which of the following correctly declares a
variable called `closet` which is a dynamic array of `MyPairs` whose
parameterized type is a `string`?

Choices:
   a. None of the other options is correct.
-> b. ```
      MyPair<string> * closet;
      ```
   c. More than one of the other options are correct.
   d. ```
      MyPair<string *> closet;
      ```
   e. ```
      MyPair * closet = new string[size]
      ```
Your answer was correct.

~~~~~~~~~~~~~~~~~~~~~~~~

In implementing Stack ADT, using which of the following data structure
gives worst asymptotic runtime for `push`? (Assume we require to `push`
at the end of list or array)

Choices:
   a. Array (size of array larger than possible elements in stack).
-> b. Singly linked list with head pointer only.
   c. Singly linked list with head and tail pointer.
   d. All options provide the same runtime.
Your answer was correct.

~~~~~~~~~~~~~~~~~~~~~~~~

Suppose a `std::stack<int> s` contains 6 elements `1, 2, 3, 4, 5, 6`
(pushed in that order). What is the result of executing the following
code snippet, assuming all required libraries are included?

    for(int i = 0; i<6; i++){
        if(i%2==0) {
            s.push(s.top());
            s.pop();
        }
    }

Choices:
   a. The top half of `s` contains even elements and the bottom half of `s`
      contains odd elements
   b. The elements of `s` are reversed.
   c. The even numbers in `s` are reversed.
   d. The odd numbers in `s` are reversed.
-> e. `s` remains the same.
Your answer was correct.

~~~~~~~~~~~~~~~~~~~~~~~~

Consider this simple example.

    string * b = new string("NULL");
    string * a = b;
    cout<<*a<<endl;
    delete a;
    a = NULL; 
    b = NULL;

What is the result of executing these statements if you assume the
standard `iostream` library has been included?

Choices:
   a. This code does not compile.
   b. None of the other options describes the behavior of this code.
   c. The memory address of `b` is sent to standard out.
   d. This code results in undefined runtime behavior.
-> e. `NULL` is sent to standard out.
Your answer was correct.

~~~~~~~~~~~~~~~~~~~~~~~~

Which of the following is a correct function signature for the
overloaded addition operator for the `sphere` class, if we want that
operator to return a `sphere` whose radius is the sum of the radii of
the object and its parameter?

Choices:
   a. `sphere sphere::operator+(const sphere & left, const sphere & right);`
   b. `sphere & sphere::operator+();`
-> c. `sphere sphere::operator+(const sphere & right) const;`
   d. None of the other options are appropriate
   e. More than one of the three function signatures, could be used.
Your answer was correct.

~~~~~~~~~~~~~~~~~~~~~~~~

What is the total tightest worst case running time of adding $n$
distinct elements to a queue that is implemented using 2 stacks, if no
other operations are performed?

Choices:
   a. None of the above
-> b. $O(n)$
   c. $O(n^2)$
   d. $O(n \log n)$
   e. $O(\log n)$
Your answer was correct.

~~~~~~~~~~~~~~~~~~~~~~~~

We have implemented the Stack ADT as an array. Every time the array is
full, you resize the array creating a new array that can hold four times
as many elements as the previous array and copy values over from the old
array. What is the total running time for $n$ pushes to the stack.

Choices:
   a. $O(n)$.
   b. $O(n \log n)$.
-> c. $O(\log n)$.
   d. $O(n^2)$.
   e. $O(1)$.
Your answer was incorrect.

~~~~~~~~~~~~~~~~~~~~~~~~

Consider a class `List` that implements an unordered list. Suppose it
has as its representation a singly linked list with a `head` and `tail`
pointer (i.e. pointers to the first and last nodes in the list).

Given that representation, which of the following operations could be
implemented in $O(1)$ time?

I. Insert item at the front of the list  
II. Insert item at the rear of the list  
III. Delete front item from list  
IV. Delete rear item from list

Choices:
   a. I and III
-> b. I, II and III
   c. I, II and IV
   d. All of them
   e. I and II
Your answer was correct.

~~~~~~~~~~~~~~~~~~~~~~~~

In the worst case, the number of comparisons needed to search a singly
linked list of length $n$ for a given element is:

Choices:
   a. $O(1)$
   b. $O(n \log n)$
-> c. $O(n)$
   d. $O(\log n)$
   e. $O(\log\log n)$
Your answer was correct.

~~~~~~~~~~~~~~~~~~~~~~~~

In a sorted doubly linked list of size $n^2$, time taken to calculate
the sum of all elements in the list is

Choices:
   a. $O(n \log n)$.
-> b. $O(n^2)$.
   c. $O(1)$.
   d. $O(\log n)$.
   e. $O(n)$.
Your answer was correct.

~~~~~~~~~~~~~~~~~~~~~~~~

